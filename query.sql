-- Inicio src/DFisico/Drop.sql
  drop table notificaciones_puntos;
  drop table log_miembro;
  drop table log_inventario;
  drop table auditoria_compra;
  drop table compraxproducto;
  drop table txpuntos;
  drop table impuestoxcompra;
  drop table miembroxcorreo;
  drop table pago;
  drop table compra;
  drop table inventariocafeteria;
  drop table producto;
  drop table comisiondiariacolaborador; -- CA-1
  drop table colaborador;
  drop table cafeteria;
  drop table piso;
  drop table edificio;
  drop table miembro;
  drop table puntos;
-- Fin src/DFisico/Drop.sql

-- Inicio src/DFisico/DDL.sql
  create table puntos (
     valor int not null check ( valor > 0 )
  );
  
  create table miembro (
     id_miembro   number
        generated by default on null as identity,
     tipo_miembro varchar2(10) not null check ( tipo_miembro in ( 'PROFESOR',
                                                                  'ESTUDIANTE',
                                                                  'EMPLEADO' ) ),
     genero       char(1) not null check ( genero in ( 'F',
                                                 'M' ) ),
     nombre       varchar2(255) not null,
     
     -- Agregado ya que es necesario poder almacenar y modificar la cantidad total de puntos
     totalpuntos  number not null check ( totalpuntos >= 0 ),
     --
  
     primary key ( id_miembro )
  );
  
  create table miembroxcorreo (
     correo     varchar2(255) not null check ( correo like '%_@_%_.__%' ),
     id_miembro number not null,
     primary key ( correo ),
     foreign key ( id_miembro )
        references miembro ( id_miembro )
  );
  
  create table edificio (
     nombre varchar2(255) not null,
     primary key ( nombre )
  );
  
  create table piso (
     id_piso         number
        generated by default on null as identity,
     nombre_edificio varchar2(255) not null,
     primary key ( id_piso ),
     foreign key ( nombre_edificio )
        references edificio ( nombre )
           on delete set null
  );
  
  create table cafeteria (
     nombre  varchar2(255) not null,
     id_piso number not null,
     primary key ( nombre ),
     foreign key ( id_piso )
        references piso ( id_piso )
           on delete set null
  );
  
  create table producto (
     nombre_producto   varchar2(255) not null,
     precio            number not null check ( precio >= 0 ),
     nivel_reorden     number not null,
     cantidad_reoreden number not null,
     primary key ( nombre_producto )
  );
  
  create table colaborador (
     id_colaborador      number
        generated by default on null as identity,
     nombre              varchar2(255) not null,
     tipo_contrato       varchar2(50) not null check ( tipo_contrato in ( 'TEMPORAL',
                                                                    'PLANTA' ) ),
     nombre_cafeteria    varchar2(255) not null,
     porcentaje_comision number not null check ( porcentaje_comision >= 0
        and porcentaje_comision <= 100 ),
     primary key ( id_colaborador ),
     foreign key ( nombre_cafeteria )
        references cafeteria ( nombre )
           on delete set null
  );
  
  create table inventariocafeteria (
     nombre_cafeteria varchar2(255) not null,
     nombre_producto  varchar2(255) not null,
     existencias      int not null check ( existencias >= 0 ),
     primary key ( nombre_cafeteria,
                   nombre_producto ),
     foreign key ( nombre_cafeteria )
        references cafeteria ( nombre )
           on delete set null,
     foreign key ( nombre_producto )
        references producto ( nombre_producto )
           on delete set null
  );
  
  create table compra (
     id_compra      number
        generated by default on null as identity,
     id_miembro     number not null,
     id_colaborador number not null,
     fecha          date not null,
     total_compra   number check ( total_compra >= 0 ),
     primary key ( id_compra ),
     foreign key ( id_miembro )
        references miembro ( id_miembro )
           on delete set null,
     foreign key ( id_colaborador )
        references colaborador ( id_colaborador )
           on delete set null
  );
  
  create table compraxproducto (
     id_compra       number
        generated by default on null as identity,
     nombre_producto varchar2(255),
     cantidad        int not null check ( cantidad > 0 ),
     primary key ( id_compra,
                   nombre_producto ),
     foreign key ( id_compra )
        references compra ( id_compra )
           on delete set null,
     foreign key ( nombre_producto )
        references producto ( nombre_producto )
           on delete set null
  );
  
  create table txpuntos (
     id_txpuntos  number
        generated by default on null as identity,
     id_compra    number,
     id_miembro   number not null,
     fecha        date not null,
     total_puntos number not null check ( total_puntos != 0 ),
     tipo         varchar2(10) not null check ( tipo in ( 'CANJE',
                                                  'COMPRA',
                                                  'ACUMULAR' ) ),
     primary key ( id_txpuntos ),
     foreign key ( id_compra )
        references compra ( id_compra )
           on delete set null,
     foreign key ( id_miembro )
        references miembro ( id_miembro )
           on delete set null
  );
  
  create table impuestoxcompra (
     id_impuesto   number
        generated by default on null as identity,
     id_compra     number not null,
     tipo_impuesto varchar2(20) not null check ( tipo_impuesto in ( 'IVA',
                                                                    'ISR',
                                                                    'ICA' ) ),
     porcentaje    number not null check ( porcentaje >= 0
        and porcentaje <= 100 ),
     primary key ( id_impuesto ),
     foreign key ( id_compra )
        references compra ( id_compra )
           on delete set null
  );
  
  create table pago (
     id_pago        number
        generated by default on null as identity,
     id_compra      number not null,
     monto_total    number not null check ( monto_total >= 0 ),
     metodo_pago    varchar2(20) not null check ( metodo_pago in ( 'CREDITO',
                                                                'DEBITO',
                                                                'EFECTIVO',
                                                                'PUNTOS' ) ),
     numero_tarjeta varchar2(16),
     primary key ( id_pago ),
     foreign key ( id_compra )
        references compra ( id_compra )
           on delete set null
  );
-- Fin src/DFisico/DDL.sql

-- Inicio src/DFisico/relationsInsertFile.sql
  DELETE FROM CompraxProducto;
  DELETE FROM TxPuntos;
  DELETE FROM ImpuestoXCompra;
  DELETE FROM Pago;
  DELETE FROM Compra;
  DELETE FROM InventarioCafeteria;
  DELETE FROM Producto;
  DELETE FROM Colaborador;
  DELETE FROM Cafeteria;
  DELETE FROM Piso;
  DELETE FROM Edificio;
  DELETE FROM Miembro;
  DELETE FROM Puntos;
  
  --- Puntos
  INSERT INTO Puntos (valor) VALUES (1000);
  
  --- Miembro
  INSERT INTO Miembro (Tipo_Miembro, Genero, Nombre, totalpuntos) VALUES ('PROFESOR', 'M', 'Juan Pérez', 0); -- 1
  INSERT INTO Miembro (Tipo_Miembro, Genero, Nombre, totalpuntos) VALUES ('ESTUDIANTE', 'M', 'Miguel Vargas', 0); -- 2
  INSERT INTO Miembro (Tipo_Miembro, Genero, Nombre, totalpuntos) VALUES ('ESTUDIANTE', 'F', 'Sara Urñea', 0); -- 3
  INSERT INTO Miembro (Tipo_Miembro, Genero, Nombre, totalpuntos) VALUES ('ESTUDIANTE', 'M', 'Nicolas Granados', 0); -- 4
  INSERT INTO Miembro (Tipo_Miembro, Genero, Nombre, totalpuntos) VALUES ('EMPLEADO', 'M', 'Carlos García', 0); -- 5
  
  --- CorreoxMiembro
  INSERT INTO MiembroxCorreo (Correo, ID_Miembro) VALUES ('juan.perez@javeriana.edu.co', 1);
  INSERT INTO MiembroxCorreo (Correo, ID_Miembro) VALUES ('vargas_mf@javeriana.edu.co', 2);
  INSERT INTO MiembroxCorreo (Correo, ID_Miembro) VALUES ('sara_u@javeriana.edu.co', 3);
  INSERT INTO MiembroxCorreo (Correo, ID_Miembro) VALUES ('nicolas_granados@javeriana.edu.co', 4);
  INSERT INTO MiembroxCorreo (Correo, ID_Miembro) VALUES ('carlos.garcia@javeriana.edu.co', 5);
  
  
  --- Edificio
  INSERT INTO edificio (Nombre) VALUES ('Ed. Fernando Baron');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Gabriel Giraldo');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Arango Puerta');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Atico');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Julio Carrizosa');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Jose Gabriel Maldonado');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Jorge Hoyoso Vasques');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Emilio Arango');
  INSERT INTO edificio (Nombre) VALUES ('Facultad de Artes');
  INSERT INTO edificio (Nombre) VALUES ('Hospital Universitario San Ignacio');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Pablo VI');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Felix Restrepo');
  INSERT INTO edificio (Nombre) VALUES ('Ed. Jose Rafael Arboleda');
  
  --- Piso
  
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Fernando Baron'); -- 1
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Fernando Baron'); -- 2
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Fernando Baron'); -- 3
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Gabriel Giraldo'); -- 4
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Gabriel Giraldo'); -- 5
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Arango Puerta'); -- 6
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Arango Puerta'); -- 7
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Arango Puerta'); -- 8
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Atico'); -- 9
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Atico'); -- 10
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Julio Carrizosa'); -- 11
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Julio Carrizosa'); -- 12
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Gabriel Maldonado'); -- 13
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Gabriel Maldonado'); -- 14
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Gabriel Maldonado'); -- 15
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jorge Hoyoso Vasques'); -- 16
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jorge Hoyoso Vasques'); -- 17
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jorge Hoyoso Vasques'); -- 18
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jorge Hoyoso Vasques'); -- 19
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Emilio Arango'); -- 20
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Emilio Arango'); -- 21
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Emilio Arango'); -- 22
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Facultad de Artes'); -- 23
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Facultad de Artes'); -- 24
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Hospital Universitario San Ignacio'); -- 25
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Hospital Universitario San Ignacio'); -- 26
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Hospital Universitario San Ignacio'); -- 27
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Pablo VI'); -- 28
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Pablo VI'); -- 29
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Pablo VI'); -- 30
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Felix Restrepo'); -- 31
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Felix Restrepo'); -- 32
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Felix Restrepo'); -- 33
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Rafael Arboleda'); -- 34
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Rafael Arboleda'); -- 35
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Rafael Arboleda'); -- 36
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Rafael Arboleda'); -- 37
  INSERT INTO Piso (Nombre_Edificio) VALUES ('Ed. Jose Rafael Arboleda'); -- 38
  
  --- Cafeteria
  
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería A', 1);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería B', 5);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería C', 7);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería D', 10);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería E', 11);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería F', 13);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería G', 17);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería H', 21);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería I', 24);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería J', 27);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería K', 28);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería L', 32);
  INSERT INTO Cafeteria (Nombre, ID_Piso) VALUES ('Cafetería M', 37);
  
  --- Producto
  
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Té', 10, 3, 5000);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Galleta', 30, 2, 1500);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Bebida Energética', 20, 0, 8000);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Ensalada', 12000, 10, 4);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Fruta', 2500, 15, 5);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Agua', 1000, 50, 10);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Sopa', 7000, 5, 2);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Wrap', 15000, 7 ,3);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Bocadillo', 3000, 15, 4);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Helado', 4500, 10, 1);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Smoothie', 10000, 5, 1);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Brownie', 3500, 20, 5);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Pizza', 20000, 3, 1);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Hot Dog', 6000, 11, 4);
  INSERT INTO Producto (Nombre_Producto, Precio, Cantidad_Reoreden, Nivel_Reorden) VALUES ('Croissant', 2500, 15, 6);
  
  --- Colaborador
  
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('María González', 'PLANTA', 'Cafetería A', 10);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Pedro López', 'TEMPORAL', 'Cafetería A', 8);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Sofía Martínez', 'PLANTA', 'Cafetería B', 7);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Luis Ramírez', 'TEMPORAL', 'Cafetería B', 12);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Ana Torres', 'PLANTA', 'Cafetería C', 5);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Javier Gómez', 'TEMPORAL', 'Cafetería C', 2);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Clara Fernández', 'PLANTA', 'Cafetería D', 10);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Diego Herrera', 'TEMPORAL', 'Cafetería D', 12);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Elena Martínez', 'PLANTA', 'Cafetería E', 8);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Fernando Torres', 'TEMPORAL', 'Cafetería E', 9);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Gabriel Salazar', 'PLANTA', 'Cafetería F', 10);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Isabel Rojas', 'TEMPORAL', 'Cafetería F', 11);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Julián Suárez', 'PLANTA', 'Cafetería G', 14);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Karla Medina', 'TEMPORAL', 'Cafetería G', 7);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Laura Castillo', 'PLANTA', 'Cafetería H', 6);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Martín Vega', 'TEMPORAL', 'Cafetería H', 2);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Nicolás Acosta', 'PLANTA', 'Cafetería I', 5);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Olga López', 'TEMPORAL', 'Cafetería I', 10);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Pablo Gómez', 'PLANTA', 'Cafetería J', 9);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Rosa Martínez', 'TEMPORAL', 'Cafetería J', 10);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Santiago Díaz', 'PLANTA', 'Cafetería K', 8);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Teresa Ramírez', 'TEMPORAL', 'Cafetería K', 12);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Ulises Moreno', 'PLANTA', 'Cafetería L', 15);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Valeria Silva', 'TEMPORAL', 'Cafetería L', 13);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Walter Hernández', 'PLANTA', 'Cafetería M', 8);
  INSERT INTO Colaborador (Nombre, Tipo_Contrato, Nombre_Cafeteria, Porcentaje_Comision) VALUES ('Ximena González', 'TEMPORAL', 'Cafetería M', 2);
  
  --- InventarioCafeteria
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Té', 12); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Galleta', 3); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Fruta', 12); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Agua', 9); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Sopa', 8); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Bocadillo', 11); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Helado', 5); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Brownie', 12); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Pizza', 7); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Hot Dog', 11); -- Hot Dog
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería A', 'Croissant', 9); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Té', 12); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Galleta', 13); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Ensalada', 6); -- Ensalada
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Fruta', 9); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Sopa', 3); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Wrap', 4); -- Wrap
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Bocadillo', 4); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Helado', 8); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Smoothie', 12); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Brownie', 12); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Pizza', 13); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería B', 'Hot Dog', 14); -- Hot Dog
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Té', 14); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Bebida Energética', 10); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Fruta', 10); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Agua', 12); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Sopa', 4); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Wrap', 13); -- Wrap
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Bocadillo', 9); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Helado', 4); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Smoothie', 11); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Brownie', 12); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Pizza', 4); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Hot Dog', 4); -- Hot Dog
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería C', 'Croissant', 11); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Té', 14); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Galleta', 5); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Bebida Energética', 4); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Ensalada', 7); -- Ensalada
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Fruta', 13); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Agua', 4); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Bocadillo', 9); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Helado', 4); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Smoothie', 12); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Brownie', 12); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Pizza', 13); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería D', 'Hot Dog', 6); -- Hot Dog
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Té', 12); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Galleta', 12); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Bebida Energética', 10); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Fruta', 6); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Agua', 14); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Sopa', 7); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Bocadillo', 9); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Helado', 4); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Smoothie', 11); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería E', 'Croissant', 12); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Té', 5); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Galleta', 8); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Bebida Energética', 6); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Fruta', 7); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Agua', 14); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Sopa', 9); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Wrap', 7); -- Wrap
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Bocadillo', 7); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Smoothie', 5); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Brownie', 6); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Pizza', 7); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería F', 'Croissant', 13); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Té', 11); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Galleta', 9); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Bebida Energética', 3); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Ensalada', 9); -- Ensalada
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Fruta', 4); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Agua', 11); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Sopa', 3); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Smoothie', 11); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Brownie', 3); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Pizza', 11); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Hot Dog', 10); -- Hot Dog
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería G', 'Croissant', 7); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Té', 11); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Galleta', 4); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Fruta', 6); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Agua', 12); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Sopa', 8); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Bocadillo', 3); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Helado', 12); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Smoothie', 4); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Brownie', 14); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Pizza', 10); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Hot Dog', 9); -- Hot Dog
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería H', 'Croissant', 3); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Galleta', 10); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Bebida Energética', 10); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Ensalada', 10); -- Ensalada
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Agua', 11); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Sopa', 10); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Wrap', 7); -- Wrap
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Bocadillo', 5); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Helado', 11); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Smoothie', 3); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Brownie', 13); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Pizza', 14); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Hot Dog', 11); -- Hot Dog
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería I', 'Croissant', 6); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Galleta', 10); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Bebida Energética', 14); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Ensalada', 9); -- Ensalada
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Fruta', 3); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Agua', 12); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Helado', 4); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Smoothie', 12); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Brownie', 10); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Pizza', 14); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería J', 'Hot Dog', 6); -- Hot Dog
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Té', 14); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Galleta', 6); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Bebida Energética', 11); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Ensalada', 3); -- Ensalada
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Fruta', 11); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Agua', 7); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Sopa', 7); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Wrap', 11); -- Wrap
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Bocadillo', 14); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Helado', 11); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Smoothie', 11); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Brownie', 8); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Pizza', 4); -- Pizza 
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Hot Dog', 13); -- Hot Dog
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería K', 'Croissant', 12); -- Croissant
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Té', 7); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Galleta', 11); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Bebida Energética', 4); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Ensalada', 13); -- Ensalada
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Fruta', 7); -- Fruta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Agua', 11); -- Agua
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Sopa', 6); -- Sopa
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Wrap', 9); -- Wrap
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Helado', 11); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Smoothie', 13); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Brownie', 8); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Pizza', 11); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería L', 'Hot Dog', 6); -- Hot Dog
  
  
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Té', 8); -- Té
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Galleta', 14); -- Galleta
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Bebida Energética', 6); -- Bebida Energética
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Wrap', 11); -- Wrap
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Bocadillo', 7); -- Bocadillo
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Helado', 10); -- Helado
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Smoothie', 5); -- Smoothie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Brownie', 13); -- Brownie
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Pizza', 11); -- Pizza
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Hot Dog', 14); -- Hot Dog
  INSERT INTO InventarioCafeteria (Nombre_Cafeteria, Nombre_Producto, Existencias) VALUES ('Cafetería M', 'Croissant', 12); -- Croissant
  
  --- INVOICE 1
  
  INSERT INTO Compra (ID_Miembro, ID_Colaborador, Fecha, Total_Compra) VALUES (1, 1, TO_DATE('20-03-2023', 'DD-MM-YYYY'), 47500); -- Compra ID 1
  
  INSERT INTO ImpuestoXCompra (ID_Compra, Tipo_Impuesto, Porcentaje) VALUES (1, 'IVA', 19);
  INSERT INTO ImpuestoXCompra (ID_Compra, Tipo_Impuesto, Porcentaje) VALUES (1, 'ICA', 6);
  
  INSERT INTO CompraxProducto (ID_Compra, Nombre_Producto, Cantidad) VALUES (1, 'Pizza', 1);  -- 1 Pizza
  INSERT INTO CompraxProducto (ID_Compra, Nombre_Producto, Cantidad) VALUES (1, 'Té', 2);  -- 2 Té
  INSERT INTO CompraxProducto (ID_Compra, Nombre_Producto, Cantidad) VALUES (1, 'Bebida Energética', 1);  -- 1 Bebida Energética
  
  INSERT INTO TxPuntos (ID_Compra, Fecha, Total_Puntos, Tipo, ID_Miembro) VALUES (1, TO_DATE('20-03-2023', 'DD-MM-YYYY'), 38, 'ACUMULAR', 1);
  
  INSERT INTO Pago (ID_Compra, Monto_total, Metodo_Pago) VALUES (1, 47500, 'EFECTIVO');
  
  -- INVOICE 2
  
  INSERT INTO Compra (ID_Miembro, ID_Colaborador, Fecha, Total_Compra) VALUES (3, 5, TO_DATE('24-03-2023', 'DD-MM-YYYY'), 21000);
  
  INSERT INTO ImpuestoXCompra (ID_Compra, Tipo_Impuesto, Porcentaje) VALUES (2, 'IVA', 19);
  
  INSERT INTO CompraxProducto (ID_Compra, Nombre_Producto, Cantidad) VALUES (2, 'Sopa', 1);  -- 1 Sopa
  INSERT INTO CompraxProducto (ID_Compra, Nombre_Producto, Cantidad) VALUES (2, 'Té', 1);  -- 1 Té
  INSERT INTO CompraxProducto (ID_Compra, Nombre_Producto, Cantidad) VALUES (2, 'Helado', 2);  -- 2 Helado
  
  INSERT INTO TxPuntos (ID_Compra, Fecha, Total_Puntos, Tipo, ID_Miembro) VALUES (1, TO_DATE('24-03-2023', 'DD-MM-YYYY'), 21, 'ACUMULAR', 3);
  
  INSERT INTO Pago (ID_Compra, Monto_total, Metodo_Pago, Numero_Tarjeta) VALUES (2, 20000, 'CREDITO', '2332223211232232');
  INSERT INTO Pago (ID_Compra, Monto_total, Metodo_Pago) VALUES (2, 4990, 'EFECTIVO');
-- Fin src/DFisico/relationsInsertFile.sql

-- Inicio src/entrega/0-cambios/CA-1.sql
  -- Para almacenar las comisiones diarias de cada colaborador
  create table comisiondiariacolaborador (
     id_colaborador number not null,
     fecha          date not null,
     comisionventas number not null,
     primary key ( id_colaborador,
                   fecha ),
     foreign key ( id_colaborador )
        references colaborador ( id_colaborador )
           on delete set null
  )
-- Fin src/entrega/0-cambios/CA-1.sql

-- Inicio src/entrega/1-procedimientos/PRO-2.sql
  create or replace procedure calcular_comisiones_diarias as
     comision    number;
     ventas      number;
     yacalculado number := 0;
  begin
     for colab in (
        select colaborador.id_colaborador,
               sum(coalesce(
                  total_compra,
                  0
               )) as total_ventas,
               porcentaje_comision
          from colaborador
          full outer join (
           select *
             from compra
            where trunc(fecha) = trunc(sysdate)
        ) compra
        on colaborador.id_colaborador = compra.id_colaborador
         group by colaborador.id_colaborador,
                  porcentaje_comision
     ) loop
        select count(*)
          into yacalculado
          from comisiondiariacolaborador
         where id_colaborador = colab.id_colaborador
           and fecha = trunc(sysdate)
           and rownum = 1;
  
        if ( yacalculado > 0 ) then
           update comisiondiariacolaborador
              set
              comisionventas = colab.total_ventas * ( colab.porcentaje_comision / 100 )
            where comisiondiariacolaborador.id_colaborador = colab.id_colaborador;
        else
           insert into comisiondiariacolaborador (
              id_colaborador,
              fecha,
              comisionventas
           ) values ( colab.id_colaborador,
                      trunc(sysdate),
                      colab.total_ventas * ( colab.porcentaje_comision / 100 ) );
        end if;
     end loop;
  
     commit;
  end;
-- Fin src/entrega/1-procedimientos/PRO-2.sql

-- Inicio src/entrega/1-procedimientos/PRO-3.sql
  /*
  Actualizar el valor de los puntos.
  */
  
  create or replace procedure actualizar_valor_puntos (
     p_valor_puntos numeric
  ) as
  begin
     if p_valor_puntos < 0 then
        dbms_output.put_line('No se puede asignar un valor menor a 0');
     else
        delete from puntos;
        insert into puntos ( valor ) values ( p_valor_puntos );
     end if;
  end;
-- Fin src/entrega/1-procedimientos/PRO-3.sql

-- Inicio src/entrega/1-procedimientos/PRO-4.sql
  create or replace procedure canjear_puntos (
     p_id_miembro        in number,
     p_nombre_producto   in varchar2,
     p_cantidad_producto in number
  ) as
     v_puntostotales     number;
     v_precio_producto   number;
     v_valor_punto       number;
     v_puntos_requeridos number;
  begin
      -- Obtener los puntos totales del miembro
     select totalpuntos
       into v_puntostotales
       from miembro
      where id_miembro = p_id_miembro;
  
      -- Obtener el precio del producto
     select precio
       into v_precio_producto
       from producto
      where nombre_producto = p_nombre_producto;
  
      -- Obtener el valor de un punto en unidades monetarias (de la tabla Puntos)
     select valor
       into v_valor_punto
       from puntos; 
  
      -- Calcular los puntos requeridos para el canje
     v_puntos_requeridos := FLOOR(( v_precio_producto * p_cantidad_producto ) / v_valor_punto);
  
      -- Verificar si el miembro tiene suficientes puntos para el canje
     if v_puntostotales >= v_puntos_requeridos then
          -- Actualizar los puntos del miembro restando los puntos usados
        update miembro
           set
           totalpuntos = totalpuntos - v_puntos_requeridos
         where id_miembro = p_id_miembro;
  
     else
        raise_application_error(
           -20003,
           'Error: Puntos insuficientes para realizar el canje.'
        );
     end if;
  end;
-- Fin src/entrega/1-procedimientos/PRO-4.sql

-- Inicio src/entrega/2-funciones/FUN-1.sql
  /*
    Toma el valor de los puntos desde la tabla PUNTOS, luego lo multiplca por el parametro p_precio, esto le hace un
    FLOOR(n) para enviar un numero entero.
  */
  
  create or replace function calcular_puntos_compra (
     p_precio numeric
  ) return numeric is
     v_puntos     numeric := 0;
     v_cantpuntos numeric := 0;
  begin
     select valor
       into v_cantpuntos
       from puntos
      where rownum = 1;
  
     v_puntos := floor(p_precio / v_cantpuntos);
     return v_puntos;
  end;
-- Fin src/entrega/2-funciones/FUN-1.sql

-- Inicio src/entrega/2-funciones/FUN-2.sql
  /*
    Usando el parametro p_id_compra, vamos a ver que impuestos son aplicables a la compra,
    así podemos calcular el porcentaje del subtotal a pagar según cada impuesto y luego
    lo sumaremos para poder retornar el total de impuestos aplicables a pagar
  */
  
  create or replace function calcular_impuestos (
     p_id_compra compra.id_compra%type,
     p_subtotal  numeric
  ) return numeric is
     v_imp_calculado numeric := 0;
  begin
     for impuesto in (
        select porcentaje
          from impuestoxcompra
         where id_compra = p_id_compra
     ) loop
        v_imp_calculado := v_imp_calculado + ( p_subtotal * ( impuesto.porcentaje / 100 ) );
     end loop;
  
     return v_imp_calculado;
  end;
-- Fin src/entrega/2-funciones/FUN-2.sql

-- Inicio src/entrega/0-cambios/CA-2.sql
  -- Funcion que calcula el sub total de la compra
  create or replace function calcular_sub_total (
     p_id_compra compra.id_compra%type
  ) return numeric is
     v_sub_total numeric := 0;
  begin
     select sum( cantidad * precio ) as valor
       into v_sub_total
       from producto,
            compraxproducto
      where compraxproducto.id_compra = p_id_compra
        and producto.nombre_producto = compraxproducto.nombre_producto;
     return v_sub_total;
  end;
-- Fin src/entrega/0-cambios/CA-2.sql

-- Inicio src/entrega/2-funciones/FUN-3.sql
  create or replace function obtener_saldo_puntos (
     id_miembro number
  ) return number is
     puntos_acumulados number := 0;
     puntos_canjeados  number := 0;
  begin
      -- Obtener puntos acumulados
     select coalesce(
        sum(total_puntos),
        0
     )
       into puntos_acumulados
       from txpuntos
      where id_miembro = id_miembro
        and tipo = 'ACUMULAR';
  
      -- Obtener puntos canjeados
     select coalesce(
        sum(total_puntos),
        0
     )
       into puntos_canjeados
       from txpuntos
      where id_miembro = id_miembro
        and tipo = 'CANJE';
  
      -- Retornar saldo de puntos
     return puntos_acumulados - puntos_canjeados;
  end;
-- Fin src/entrega/2-funciones/FUN-3.sql

-- Inicio src/entrega/2-funciones/FUN-4.sql
  --Actualizar inventario segun productos comprados
  
  create or replace function verificar_existencias (
     p_nombre_producto in varchar2,
     p_id_compra       in number,
     p_cantidad        in number
  ) return boolean is
     v_existencias      number;
     v_nombre_cafeteria varchar2(100);
  begin
      -- Obtener la cafetería asociada a la compra
     select nombre_cafeteria
       into v_nombre_cafeteria
       from colaborador
      where id_colaborador = (
        select id_colaborador
          from compra
         where id_compra = p_id_compra
     );
  
      -- Obtener las existencias actuales del producto en la cafetería
     select existencias
       into v_existencias
       from inventariocafeteria
      where nombre_cafeteria = v_nombre_cafeteria
        and nombre_producto = p_nombre_producto;
  
      -- Verificar si hay suficientes existencias
     if v_existencias >= p_cantidad then
        return true;
     else
        return false;
     end if;
  end;
-- Fin src/entrega/2-funciones/FUN-4.sql

-- Inicio src/entrega/3-disparadores/DISP-1.sql
  create or replace trigger actualizar_inventario before
     insert on compraxproducto
     for each row
  declare
     v_existencias number;
  begin
     select existencias
       into v_existencias
       from inventariocafeteria --Toma las existencias iniciales
      where nombre_cafeteria = (
           select nombre_cafeteria --Selecciona el nombre de la cafeteria donde se va a reducir el inventario y a que producto se le reduce
             from colaborador
            where id_colaborador = (
              select id_colaborador --Accede a traves de ID_Colaborador en compra a la cafeteria correspondiente
                from compra
               where id_compra = :new.id_compra
           )
        ) --Se encarga de tomar la compra que se esta referenciando
        and nombre_producto = :new.nombre_producto; --Selecciona el producto en especifico
  
     if not verificar_existencias(
        :new.nombre_producto,
        :new.id_compra,
        :new.cantidad
     ) then
        raise_application_error(
           -20002,
           'Error: No hay suficientes existencias para completar la compra.'
        );
     end if;
  
  
     update inventariocafeteria --Actualiza los valores
        set
        existencias = existencias - :new.cantidad
      where nombre_cafeteria = (
           select nombre_cafeteria
             from colaborador
            where id_colaborador = (
              select id_colaborador
                from compra
               where id_compra = :new.id_compra
           )
        )
        and nombre_producto = :new.nombre_producto;
  end;
-- Fin src/entrega/3-disparadores/DISP-1.sql

-- Inicio src/entrega/3-disparadores/DISP-2.sql
  /*
  
  */
  
  create or replace trigger actualizar_saldo_puntos after
     insert or update or delete on txpuntos
     for each row
  declare
     v_diff numeric := 0;
  begin
     if deleting then
        v_diff := -old.total_puntos;
     elsif inserting then
        v_diff := new.total_puntos;
     elsif updating then
        v_diff := new.total_puntos - old.total_puntos;
     end if;
  
     update miembro
        set
        totalpuntos = totalpuntos + v_diff
      where id_miembro = new.id_miembro;
  end;
-- Fin src/entrega/3-disparadores/DISP-2.sql

-- Inicio src/entrega/3-disparadores/DISP-3.sql
  -- Al completar una compra, es decir, cuando se realiza un pago, se debe actualizar la comisión
  
  create or replace trigger calcular_comision_en_venta after
     insert on pago
     for each row
  declare
     v_comision       number := 0;  -- Iniciar como 0 en caso de que no haya ventas previas
     v_ventas         number := 0;  -- Iniciar como 0 en caso de que no haya ventas previas
     yacalculado      number := 0;
     v_id_colaborador colaborador.id_colaborador%type;
  begin
     select compra.id_colaborador
       into v_id_colaborador
       from compra
      where compra.id_compra = :new.id_compra
        and rownum = 1;
  
     select count(*)
       into yacalculado
       from comisiondiariacolaborador
      where id_colaborador = v_id_colaborador
        and fecha = trunc(sysdate)
        and rownum = 1;
  
     select sum(coalesce(
        total_compra,
        0
     )) as valor
       into v_ventas
       from colaborador,
            compra
      where colaborador.id_colaborador = v_id_colaborador
        and trunc(fecha) = trunc(SYSDATE);
  
     select porcentaje_comision
       into v_comision
       from colaborador
      where id_colaborador = v_id_colaborador
        and rownum = 1;
  
     if ( yacalculado > 0 ) then
        update comisiondiariacolaborador
           set
           comisionventas = (v_comision / 100) * v_ventas
         where comisiondiariacolaborador.id_colaborador = v_id_colaborador;
     else
        insert into comisiondiariacolaborador (
           id_colaborador,
           fecha,
           comisionventas
        ) values ( v_id_colaborador,
                   trunc(sysdate),
                   (v_comision / 100) * v_ventas );
     end if;
  end;
-- Fin src/entrega/3-disparadores/DISP-3.sql

-- Inicio src/entrega/4-nuevas-modificaciones/NM-2.sql
  create table log_miembro (
     id_log     number
        generated by default on null as identity
     not null,
     id_miembro number not null,
     operacion  varchar2(10) not null, -- Puede ser 'INSERT', 'UPDATE' o 'DELETE'
     fecha      timestamp default current_timestamp not null,
     usuario    varchar2(50), -- Usuario que realizó el cambio
     detalles   varchar2(4000), -- Información adicional del cambio
  
     primary key ( id_log ),
     foreign key ( id_miembro )
        references miembro ( id_miembro )
           on delete set null
  );
  
  create table auditoria_compra (
     id_log    number
        generated by default on null as identity
     not null,
     id_compra number not null,
     operacion varchar2(10) not null,
     fecha     timestamp default current_timestamp not null,
     usuario   varchar2(50),
     detalles  varchar2(4000),
     primary key ( id_log ),
     foreign key ( id_compra )
        references compra ( id_compra )
           on delete set null
  );
  
  create table log_inventario (
     id_log           number
        generated by default on null as identity
     not null,
     nombre_cafeteria varchar2(50) not null,
     nombre_producto  varchar2(50) not null,
     operacion        varchar2(10) not null,
     fecha            timestamp default current_timestamp not null,
     usuario          varchar2(50),
     detalles         varchar2(4000),
     primary key ( id_log ),
     foreign key ( nombre_cafeteria )
        references cafeteria ( nombre )
           on delete set null,
     foreign key ( nombre_producto )
        references producto ( nombre_producto )
           on delete set null
  );
-- Fin src/entrega/4-nuevas-modificaciones/NM-2.sql

-- Inicio src/entrega/5-funcionalidades-restricciones/NFR-1.sql
  create or replace trigger log_miembro_trigger after
     insert or update or delete on miembro
     for each row
  declare
     operacion varchar2(10);
  begin
     if inserting then
        operacion := 'INSERT';
     elsif updating then
        operacion := 'UPDATE';
     elsif deleting then
        operacion := 'DELETE';
     end if;
  
     insert into log_miembro (
        id_log,
        id_miembro,
        operacion,
        usuario,
        detalles
     ) values ( log_miembro_seq.nextval,
                :old.id_miembro,
                operacion,
                user,
                'Cambio en la tabla Miembro' );
  end;
  
  create or replace trigger log_inventario_trigger after
     insert or update or delete on inventariocafeteria
     for each row
  declare
     operacion varchar2(10);
  begin
     if inserting then
        operacion := 'INSERT';
     elsif updating then
        operacion := 'UPDATE';
     elsif deleting then
        operacion := 'DELETE';
     end if;
  
     insert into log_inventario (
        id_log,
        nombre_cafeteria,
        nombre_producto,
        operacion,
        usuario,
        detalles
     ) values ( log_inventario_seq.nextval,
                :old.nombre_cafeteria,
                :old.nombre_producto,
                operacion,
                user,
                'Cambio en la tabla Inventario_Cafeteria' );
  end;
-- Fin src/entrega/5-funcionalidades-restricciones/NFR-1.sql

-- Inicio src/entrega/5-funcionalidades-restricciones/NFR-2.sql
  create or replace procedure actualizar_valor_total (
     p_id_compra compra.id_compra%type
  ) as
     v_sub_total numeric := 0;
  begin
     v_sub_total := calcular_sub_total(p_id_compra);
     update compra
        set
        total_compra = coalesce(
           v_sub_total + calcular_impuestos(
              p_id_compra,
              v_sub_total
           ),
           0
        )
      where id_compra = p_id_compra;
  end;
-- Fin src/entrega/5-funcionalidades-restricciones/NFR-2.sql

-- Inicio src/entrega/5-funcionalidades-restricciones/NFR-3.sql
  create or replace procedure actualizar_totales_compras as
  begin
     for cc in (
        select id_compra
          from compra
     ) loop
        actualizar_valor_total(cc.id_compra);
     end loop;
  end;
-- Fin src/entrega/5-funcionalidades-restricciones/NFR-3.sql

-- Inicio src/entrega/5-funcionalidades-restricciones/NFR-4.sql
  -- Se actualiza el valor total de la compra, tenemos en cuenta que se puede aplicar el impuesto a cada producto individualmente
  create or replace trigger actualizar_valor_total_trigger after
     insert or update or delete on compraxproducto
     for each row
  declare
     v_precio numeric := 0;
  begin
     if inserting
     or updating then
        select precio
          into v_precio
          from producto
         where nombre_producto = :new.nombre_producto;
     else
        select precio
          into v_precio
          from producto
         where nombre_producto = :old.nombre_producto;
     end if;
  
     if inserting then
        update compra
           set
           total_compra = coalesce(
              total_compra,
              0
           ) + ( v_precio * :new.cantidad ) + calcular_impuestos(
              :new.id_compra,
              v_precio * :new.cantidad
           )
         where id_compra = :new.id_compra;
     elsif updating then
        update compra
           set
           total_compra = ( coalesce(
              total_compra,
              0
           ) - ( v_precio * :old.cantidad ) - calcular_impuestos(
              :old.id_compra,
              v_precio * :old.cantidad
           ) ) + ( v_precio * :new.cantidad ) + calcular_impuestos(
              :new.id_compra,
              v_precio * :new.cantidad
           )
         where id_compra = :new.id_compra;
     elsif deleting then
        update compra
           set
           total_compra = coalesce(
              total_compra,
              0
           ) - ( v_precio * :old.cantidad ) - calcular_impuestos(
              :old.id_compra,
              v_precio * :old.cantidad
           )
         where id_compra = :old.id_compra;
     end if;
  
  
  end;
-- Fin src/entrega/5-funcionalidades-restricciones/NFR-4.sql

-- Inicio src/entrega/6-ampliando/AMP-2.sql
  create or replace trigger aplicar_descuento before
     insert or update on compraxproducto
     for each row
  declare
     v_descuento              number;
     v_precio                 number;
     v_subtotal_con_descuento number;
  begin
     select descuento,
            precio   --Tomamos de prodcuto para calcular subtotal
       into
        v_descuento,
        v_precio
       from producto
      where nombre_producto = :new.nombre_producto;
  
     if v_descuento > 0 then
        v_subtotal_con_descuento := :new.cantidad * v_precio * ( 1 - ( v_descuento / 100 ) ); --Creo que se sobreentiende que hace :|
     else
        v_subtotal_con_descuento := :new.cantidad * v_precio;
     end if;
  
  
     :new.subtotal_detalle := v_subtotal_con_descuento; --Establecemos el valor del subtotal
  
  
     update compra --Actualizamos TODAS las compras que tengan el producto que se determino que tiene descuento
        set
        total_compra = (
           select sum(cp.subtotal_detalle) --Obtenemos todos los detalles asociados a la compra y los sumamos
             from compraxproducto cp
            where cp.id_compra = compra.id_compra
        )
      where id_compra in ( --Obtenemos los detalles de compra que tengan el producto asociado 
        select id_compra
          from compraxproducto
         where nombre_producto = :new.nombre_producto
     );
  
  end;
-- Fin src/entrega/6-ampliando/AMP-2.sql

-- Inicio src/entrega/7-control-notificaciones/CN-1.sql
  create table notificaciones_puntos (
     id_notificacion number
        generated by default on null as identity,
     fecha           timestamp,
     destinatario    number not null, -- Referencia al ID del cliente (ID_Miembro)
     mensaje         varchar2(400),
     primary key ( id_notificacion ),
     foreign key ( destinatario )
        references miembro ( id_miembro ) on delete set null
  );
-- Fin src/entrega/7-control-notificaciones/CN-1.sql

-- Inicio src/entrega/7-control-notificaciones/CN-2.sql
  create or replace trigger notificacion_puntos_insuficientes before
     insert on txpuntos
     for each row
  declare
     puntos_acumulados number;
     puntos_necesarios number := :new.total_puntos;
  begin
      -- Calcular puntos acumulados del miembro
     select coalesce(
        sum(total_puntos),
        0
     )
       into puntos_acumulados
       from txpuntos
      where id_miembro = :new.id_miembro
        and tipo = 'ACUMULAR';
  
      -- Verificar si los puntos acumulados son suficientes para la redención
     if puntos_acumulados < puntos_necesarios then
          -- Insertar notificación de puntos insuficientes
        insert into notificaciones_puntos (
           id_notificacion,
           id_miembro,
           mensaje
        ) values ( notificaciones_puntos_seq.nextval,
                   :new.id_miembro,
                   'Puntos insuficientes para redimir el producto. Intento el ' || to_char(
                      sysdate,
                      'YYYY-MM-DD HH24:MI:SS'
                   ) );
     end if;
  end;
-- Fin src/entrega/7-control-notificaciones/CN-2.sql

